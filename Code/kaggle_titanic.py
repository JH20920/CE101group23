# -*- coding: utf-8 -*-
"""Kaggle titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19lqTBGOgZKelcmWeVj7Gj_yEw-MPWwRX

**Only run if dataset is not in content folder**
"""



! git clone https://github.com/JH20920/CE101group23.git
col1 = "#ff66ff"
col2 = "#0000cc"

import pandas as pd
import matplotlib.pyplot as plt


df = pd.read_csv('CE101group23/Dataset/train.csv')
print(df)

mode_age = df["Age"].mode()[0]
df["Age"].fillna(mode_age, inplace=True)

figure1 = plt.figure(figsize=(24,6))
plt.subplot2grid((2,3),(0,0))
df.Survived.value_counts(normalize=True).plot(kind="bar", alpha=0.5)
plt.title("Survived")

plt.subplot2grid((2,3),(0,1))
df.Survived[df.Sex == "female"].value_counts(normalize=True).plot(kind="bar", alpha=0.5, color = col1)
plt.title("Female survivors")

plt.subplot2grid((2,3),(0,2))
df.Survived[df.Sex == "male"].value_counts(normalize=True).plot(kind="bar", alpha=0.5, color = col2)
plt.title("male survivors")

plt.subplot2grid((2,3),(1,0))
df.Sex[df.Survived == 1].value_counts(normalize=True).plot(kind="bar", alpha=0.5, color=[col1, col2])
plt.title("Sex of survivors")

plt.subplot2grid((2,3),(1,1))
for x in [1,2,3]:
  df.Survived[df.Pclass == x].plot(kind="kde")
plt.title("class of survivors")
plt.legend(("1st","2nd","3rd"))

plt.subplot2grid((2,3),(1,2))
df.Parch[df.Survived ==1].value_counts(normalize=True).plot(kind="bar", alpha=0.5)
plt.title("parents/children")





figure2 = plt.figure(figsize=(24,6))
plt.subplot2grid((2,3),(0,0))
df.SibSp[df.Survived == 1].value_counts(normalize=True).plot(kind="bar", alpha=0.5)
plt.title("Siblings onboard")



from scipy import stats
import numpy as np
import matplotlib.pyplot as plt
import math


datas = df.to_numpy()
print(datas[1][1])
life = []
age = []
for i in range(0,len(datas)):
  if math.isnan(datas[i][5]):
    continue
  life.append(datas[i][1])
  age.append(datas[i][5])
print(stats.pointbiserialr(life,age))
for i in range(0,len(datas)):
  plt.scatter(datas[i][1], datas[i][5], s=60)
plt.title('Point-Biserial Correlation age and death')

plt.xlim(-0.1,1.1)
plt.ylim(0,100)

plt.show()

from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import matplotlib.pyplot as plt


df = pd.read_csv('CE101group23/Dataset/train.csv')
ds = pd.read_csv('CE101group23/Dataset/test.csv')

df = df.drop(['Name','Ticket','Cabin','Embarked','Fare'], axis=1)
ds = ds.drop(['Name', 'Ticket','Cabin','Embarked','Fare'], axis=1)

def age_replace(cols):
  Age=cols[0]
  Pclass = cols[1]
  if pd.isnull(Age):
    if Pclass==1:
      return 37
    elif Pclass==2:
      return 29
    else:
      return 24  
  else:
    return Age
df['Age']=df[['Age','Pclass']].apply(age_replace, axis=1)
ds['Age']=ds[['Age','Pclass']].apply(age_replace, axis=1)


df=pd.concat([df,sex_1], axis=1)
ds = pd.concat([ds,sex_2], axis=1)

print(df.isnull().sum())
print('')
print(ds.isnull().sum())

df["Sex"].replace(("female", "male"), (0, 1), inplace=True)
ds["Sex"].replace(("female", "male"), (0, 1), inplace=True)
print(df["Sex"])

from sklearn.model_selection import train_test_split
X_train = df.drop('Survived', axis=1)
y_train=df['Survived']
X_test = df
print(df.isnull())

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
accuracy_randomforest = rf.score(X_train, y_train)
print('Accuracy: ', round(accuracy_randomforest, 2))

submission=pd.DataFrame({'PassengerId':ds['PassengerId'], 'Survived' :y_pred_rf})
print(submission)